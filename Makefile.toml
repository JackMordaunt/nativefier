[config]
default_to_workspace = false

[tasks.deploy]
dependencies = [
    "build-gui",
    "build-webview",
    "build-nativefier",
]

[tasks.build-gui]
run_task = [
    { name = "build-gui-windows", condition = { platform = ["windows"] } },
    { name = "build-gui-other" },
]

[tasks.build-webview]
command = "cargo"
args = ["build", "-p", "nativefier", "--bin", "ui"]
dependencies = ["inline-assets"]

[tasks.build-nativefier]
command = "cargo"
args = ["build", "-p", "nativefier"]

[tasks.build-gui-other]
command = "cargo"
args = ["web", "deploy", "-p", "gui", "--target=wasm32-unknown-unknown", "--release"]

[tasks.build-gui-windows]
# Note: As long as web-view uses ie11 to render we need to use emscripten
# polyfills. 
dependencies = [
    "build-gui-asmjs",
    "ie11-math-polyfill",
]

[tasks.build-gui-asmjs]
command = "cargo"
args = ["web", "deploy", "-p", "gui", "--target=asmjs-unknown-emscripten"]

[tasks.inline-assets] 
script_runner = "@shell"
script = ["inline-assets target/deploy/index.html > target/deploy/bundle.html"]
dependencies = [
    "build-gui",
]

[tasks.webview]
description = "Run the webview pointed at the default url."
command = "cargo"
args = ["run", "-p", "nativefier", "--bin", "ui"]


# Script replaces a hardcoded line with the polyfill lines.  
[tasks.ie11-math-polyfill]
script_runner = "@rust"
script = [
'''
//! Hack to polyfill the output of "asmjs-unknown-emscripten".
//!
//! Stream the generated file line by line to a temporary file,
//! inject the polyfill into the stream where necessary,
//! then replace the original with the temporary file.
//!
//! Note: Polyfill content is hardcoded. 

use std::collections::HashMap;
use std::env;
use std::fs::{self, File};
use std::io::{self, prelude::*, BufReader, BufWriter};
use std::path::PathBuf;

// List of (original, replacement) tuples.
const INSERTIONS: &'static [(&'static str, &'static str)] = &[
    (
        r#"random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };"#,
        r#"// Cryptographically insecure polyfill for ie11 `Math.random()`.
var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };
var randomBuffer = new Uint8Array(1);
random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
"#,
    ),
    (
        "return Runtime.dynCall( signature, ptr, args );",
        "return dynCall( signature, ptr, args );"
    ),
];

// Hardcoded js file to polyfill.
// It's contents must be the output of "cargo web deploy --target=asmjs-unknown-emscripten",
// with "DEMANGLE_SUPPORT=1" and "LEGACY_VM_SUPPORT=1" emscripten flags.
const INPUT_FILE: &'static str = "target/deploy/gui.js";

fn main() -> io::Result<()> {
    // Hashmap for fast lookups.
    let mut insertions = HashMap::<String, String>::new();
    for (original, replacement) in INSERTIONS {
        insertions.insert(original.to_string(), replacement.to_string());
    }
    let cwd: PathBuf = env::var("CARGO_MAKE_WORKING_DIRECTORY")
        .expect("unknown current working directory")
        .into();
    {
        let mut reader = BufReader::new(File::open(cwd.join(INPUT_FILE))?);
        let mut writer = BufWriter::new(File::create(cwd.join(format!("{}.tmp", INPUT_FILE)))?);
        let mut line = String::new();
        while let Ok(n) = reader.read_line(&mut line) {
            if n == 0 {
                break;
            }
            if let Some(insert) = insertions.get(line.trim()) {
                let padding = line.len() - line.trim_start().len();
                for insert in insert.lines() {
                    writer.write(format!("{}{}\n", " ".repeat(padding), insert).as_bytes())?;
                }
            } else {
                writer.write(line.as_bytes())?;
            }
            line.clear();
        }
    }
    fs::rename("target/deploy/gui.js.tmp", "target/deploy/gui.js")?;
    Ok(())
}
'''
]